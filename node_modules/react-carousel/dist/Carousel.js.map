{"version":3,"sources":["../src/Carousel.js"],"names":["getMaximumAccomodableItemCount","fullWidth","elementWidth","elementMargin","Math","floor","isPrevButtonVisible","firstVisibleIndex","isNextButtonVisible","totalItems","visibleItemCount","getIndexToScrollTo","direction","scrollStepDistance","index","itemsBeyondVisible","itemsBehindVisible","Error","getVisibleItemCount","itemWidth","itemMargin","controlWidth","maxWidth","availableWidth","prevButtonVisible","nextButtonVisible","Carousel","props","handleScrollToDirection","children","length","state","onItemScroll","setState","getItemElement","item","key","visibleItemIndeces","isVisible","includes","isLastAmongVisible","indexOf","boxSizing","display","listStyleType","marginRight","width","captureWrapperElementReference","element","wrapperElement","resizeEventListener","offsetWidth","window","addEventListener","clear","removeEventListener","items","itemCount","carouselStyle","flexFlow","flexGrow","overflow","style","navigationButtonStyle","height","margin","padding","navigationButtonPreviousStyle","navigationButtonNextStyle","bodyStyle","map","defaultProps"],"mappings":"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","file":"Carousel.js","sourcesContent":["// @flow\n\nimport React, {\n  Component\n} from 'react';\nimport {\n  range\n} from 'range';\nimport debounce from 'debounce';\n\ntype DirectionType = 'previous' | 'next';\n\ntype ComponentStateType = {|\n  firstVisibleIndex: number,\n  maxWidth: number\n|};\n\n/**\n * Calculates the maximum number of items that can fit the container\n * without overflowing.\n */\nexport const getMaximumAccomodableItemCount = (fullWidth: number, elementWidth: number, elementMargin: number): number => {\n  return Math.floor(fullWidth / (elementWidth + elementMargin));\n};\n\nexport const isPrevButtonVisible = (firstVisibleIndex: number): boolean => {\n  return firstVisibleIndex > 0;\n};\n\nexport const isNextButtonVisible = (totalItems: number, firstVisibleIndex: number, visibleItemCount: number): boolean => {\n  return firstVisibleIndex < totalItems - visibleItemCount;\n};\n\nexport const getIndexToScrollTo = (\n  direction: DirectionType,\n  totalItems: number,\n  visibleItemCount: number,\n  firstVisibleIndex: number,\n  scrollStepDistance: number\n): number => {\n  let index;\n\n  const itemsBeyondVisible = totalItems - firstVisibleIndex - visibleItemCount;\n  const itemsBehindVisible = firstVisibleIndex;\n\n  if (direction === 'next') {\n    index = firstVisibleIndex + (itemsBeyondVisible > scrollStepDistance ? scrollStepDistance : itemsBeyondVisible);\n  } else if (direction === 'previous') {\n    index = firstVisibleIndex - (itemsBehindVisible > scrollStepDistance ? scrollStepDistance : itemsBehindVisible);\n  } else {\n    throw new Error('Unexpected state.');\n  }\n\n  return index;\n};\n\nexport const getVisibleItemCount = (\n  totalItems: number,\n  firstVisibleIndex: number,\n  itemWidth: number,\n  itemMargin: number,\n  controlWidth: number,\n  maxWidth: number\n) => {\n  let availableWidth;\n  let visibleItemCount;\n\n  availableWidth = maxWidth + itemMargin;\n\n  const prevButtonVisible = isPrevButtonVisible(firstVisibleIndex);\n\n  if (prevButtonVisible) {\n    availableWidth -= controlWidth;\n  }\n\n  visibleItemCount = getMaximumAccomodableItemCount(availableWidth, itemWidth, itemMargin);\n\n  const nextButtonVisible = isNextButtonVisible(totalItems, firstVisibleIndex, visibleItemCount);\n\n  if (nextButtonVisible) {\n    availableWidth -= controlWidth;\n\n    visibleItemCount = getMaximumAccomodableItemCount(availableWidth, itemWidth, itemMargin);\n  }\n\n  return visibleItemCount;\n};\n\ntype PropsType = {|\n  +children: *,\n  +controlWidth: number,\n  +firstVisibleIndex: number,\n  +itemMargin: number,\n  +itemWidth: number,\n  +onItemScroll: (index: number) => void,\n  +scrollStepDistance: number,\n  +style: {\n    [key: string]: string\n  }\n|};\n\nclass Carousel extends Component<PropsType, ComponentStateType> {\n  resizeEventListener: () => void;\n  wrapperElement: HTMLElement;\n\n  static defaultProps = {\n    controlWidth: 30,\n    firstVisibleIndex: 0,\n    itemMargin: 0,\n    itemWidth: 50,\n    onItemScroll: () => {},\n    scrollStepDistance: null\n  };\n\n  constructor (props: PropsType) {\n    super(props);\n\n    this.state = {\n      firstVisibleIndex: props.firstVisibleIndex || 0,\n      maxWidth: 0\n    };\n\n    this.resizeEventListener = debounce(() => {\n      this.setState({\n        maxWidth: this.wrapperElement.offsetWidth\n      });\n    }, 100);\n  }\n\n  componentDidMount () {\n    if (!this.wrapperElement) {\n      throw new Error('Unexpected state.');\n    }\n\n    const maxWidth = this.wrapperElement.offsetWidth;\n\n    this.setState({\n      maxWidth\n    });\n\n    window.addEventListener('resize', this.resizeEventListener);\n  }\n\n  componentWillUnmount () {\n    this.resizeEventListener.clear();\n\n    window.removeEventListener('resize', this.resizeEventListener);\n  }\n\n  handleScrollToDirection = (direction: DirectionType, visibleItemCount: number): void => {\n    const index = getIndexToScrollTo(\n      direction,\n      this.props.children.length,\n      visibleItemCount,\n      this.state.firstVisibleIndex,\n      this.props.scrollStepDistance || visibleItemCount\n    );\n\n    this.props.onItemScroll(index);\n\n    this.setState({\n      firstVisibleIndex: index\n    });\n  };\n\n  getItemElement = (item: React$Element<any>, key: string, index: number, visibleItemCount: number): React$Element<any> | null => {\n    const visibleItemIndeces = range(this.state.firstVisibleIndex, visibleItemCount + this.state.firstVisibleIndex);\n    const isVisible = visibleItemIndeces.includes(index);\n    const isLastAmongVisible = visibleItemIndeces.length === visibleItemIndeces.indexOf(index) + 1;\n\n    if (!isVisible) {\n      return null;\n    }\n\n    return <li\n      key={key}\n      style={{\n        boxSizing: 'border-box',\n        display: 'flex',\n        listStyleType: 'none',\n        marginRight: isLastAmongVisible ? 0 : this.props.itemMargin,\n        width: this.props.itemWidth\n      }}\n    >\n      {item}\n    </li>;\n  };\n\n  captureWrapperElementReference = (element: *) => {\n    if (element) {\n      this.wrapperElement = element;\n    }\n  };\n\n  render () {\n    const {\n      controlWidth,\n      itemMargin,\n      children,\n      itemWidth\n    } = this.props;\n    const items = children;\n    const itemCount = items.length;\n    const visibleItemCount = getVisibleItemCount(itemCount, this.state.firstVisibleIndex, itemWidth, itemMargin, controlWidth, this.state.maxWidth);\n    const prevButtonVisible = visibleItemCount === 0 ? false : isPrevButtonVisible(this.state.firstVisibleIndex);\n    const nextButtonVisible = visibleItemCount === 0 ? false : isNextButtonVisible(itemCount, this.state.firstVisibleIndex, visibleItemCount);\n\n    const carouselStyle = {\n      boxSizing: 'border-box',\n      display: 'flex',\n      flexFlow: 'row wrap',\n      flexGrow: 1,\n      overflow: 'hidden',\n      ...this.props.style\n    };\n\n    const navigationButtonStyle = {\n      boxSizing: 'border-box',\n      height: 'inherit',\n      margin: 0,\n      padding: 0,\n      width: controlWidth\n    };\n\n    const navigationButtonPreviousStyle = {\n      ...navigationButtonStyle,\n      display: prevButtonVisible ? 'flex' : 'none'\n    };\n\n    const navigationButtonNextStyle = {\n      ...navigationButtonStyle,\n      display: nextButtonVisible ? 'flex' : 'none'\n    };\n\n    const bodyStyle = {\n      display: 'flex',\n      flexFlow: 'row wrap',\n      margin: 0,\n      padding: 0\n    };\n\n    return <div\n      className='react-carousel'\n      ref={this.captureWrapperElementReference}\n      style={carouselStyle}\n    >\n      <div\n        className='react-carousel__navigation-button react-carousel__navigation-button--previous'\n        onClick={() => {\n          this.handleScrollToDirection('previous', visibleItemCount);\n        }}\n        style={navigationButtonPreviousStyle}\n      />\n      <ul style={bodyStyle}>\n        {items.map((item, index) => {\n          if (!item.key) {\n            throw new Error('react-carousel children must have a \"key\" property. https://facebook.github.io/react/docs/lists-and-keys.html');\n          }\n\n          return this.getItemElement(item, item.key, index, visibleItemCount);\n        })}\n      </ul>\n      <div\n        className='react-carousel__navigation-button react-carousel__navigation-button--next'\n        onClick={() => {\n          this.handleScrollToDirection('next', visibleItemCount);\n        }}\n        style={navigationButtonNextStyle}\n      />\n    </div>;\n  }\n}\n\nexport default Carousel;\n"]}