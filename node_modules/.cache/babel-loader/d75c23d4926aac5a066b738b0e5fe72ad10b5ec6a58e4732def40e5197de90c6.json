{"ast":null,"code":"'use strict';\n\nconst isOptionObject = require('is-plain-obj');\nconst {\n  hasOwnProperty\n} = Object.prototype;\nconst {\n  propertyIsEnumerable\n} = Object;\nconst defineProperty = (object, name, value) => Object.defineProperty(object, name, {\n  value,\n  writable: true,\n  enumerable: true,\n  configurable: true\n});\nconst globalThis = this;\nconst defaultMergeOptions = {\n  concatArrays: false,\n  ignoreUndefined: false\n};\nconst getEnumerableOwnPropertyKeys = value => {\n  const keys = [];\n  for (const key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      keys.push(key);\n    }\n  }\n\n  /* istanbul ignore else  */\n  if (Object.getOwnPropertySymbols) {\n    const symbols = Object.getOwnPropertySymbols(value);\n    for (const symbol of symbols) {\n      if (propertyIsEnumerable.call(value, symbol)) {\n        keys.push(symbol);\n      }\n    }\n  }\n  return keys;\n};\nfunction clone(value) {\n  if (Array.isArray(value)) {\n    return cloneArray(value);\n  }\n  if (isOptionObject(value)) {\n    return cloneOptionObject(value);\n  }\n  return value;\n}\nfunction cloneArray(array) {\n  const result = array.slice(0, 0);\n  getEnumerableOwnPropertyKeys(array).forEach(key => {\n    defineProperty(result, key, clone(array[key]));\n  });\n  return result;\n}\nfunction cloneOptionObject(object) {\n  const result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};\n  getEnumerableOwnPropertyKeys(object).forEach(key => {\n    defineProperty(result, key, clone(object[key]));\n  });\n  return result;\n}\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {string[]} keys keys to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nconst mergeKeys = (merged, source, keys, config) => {\n  keys.forEach(key => {\n    if (typeof source[key] === 'undefined' && config.ignoreUndefined) {\n      return;\n    }\n\n    // Do not recurse into prototype chain of merged\n    if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n      defineProperty(merged, key, merge(merged[key], source[key], config));\n    } else {\n      defineProperty(merged, key, clone(source[key]));\n    }\n  });\n  return merged;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */\nconst concatArrays = (merged, source, config) => {\n  let result = merged.slice(0, 0);\n  let resultIndex = 0;\n  [merged, source].forEach(array => {\n    const indices = [];\n\n    // `result.concat(array)` with cloning\n    for (let k = 0; k < array.length; k++) {\n      if (!hasOwnProperty.call(array, k)) {\n        continue;\n      }\n      indices.push(String(k));\n      if (array === merged) {\n        // Already cloned\n        defineProperty(result, resultIndex++, array[k]);\n      } else {\n        defineProperty(result, resultIndex++, clone(array[k]));\n      }\n    }\n\n    // Merge non-index keys\n    result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);\n  });\n  return result;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nfunction merge(merged, source, config) {\n  if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n    return concatArrays(merged, source, config);\n  }\n  if (!isOptionObject(source) || !isOptionObject(merged)) {\n    return clone(source);\n  }\n  return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);\n}\nmodule.exports = function () {\n  const config = merge(clone(defaultMergeOptions), this !== globalThis && this || {}, defaultMergeOptions);\n  let merged = {\n    _: {}\n  };\n  for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {\n    options[_key] = arguments[_key];\n  }\n  for (const option of options) {\n    if (option === undefined) {\n      continue;\n    }\n    if (!isOptionObject(option)) {\n      throw new TypeError('`' + option + '` is not an Option Object');\n    }\n    merged = merge(merged, {\n      _: option\n    }, config);\n  }\n  return merged._;\n};","map":{"version":3,"names":["isOptionObject","require","hasOwnProperty","Object","prototype","propertyIsEnumerable","defineProperty","object","name","value","writable","enumerable","configurable","globalThis","defaultMergeOptions","concatArrays","ignoreUndefined","getEnumerableOwnPropertyKeys","keys","key","call","push","getOwnPropertySymbols","symbols","symbol","clone","Array","isArray","cloneArray","cloneOptionObject","array","result","slice","forEach","getPrototypeOf","create","mergeKeys","merged","source","config","merge","resultIndex","indices","k","length","String","filter","includes","module","exports","_","_len","arguments","options","_key","option","undefined","TypeError"],"sources":["G:/CSDL/my-app/node_modules/merge-options/index.js"],"sourcesContent":["'use strict';\nconst isOptionObject = require('is-plain-obj');\n\nconst {hasOwnProperty} = Object.prototype;\nconst {propertyIsEnumerable} = Object;\nconst defineProperty = (object, name, value) => Object.defineProperty(object, name, {\n\tvalue,\n\twritable: true,\n\tenumerable: true,\n\tconfigurable: true\n});\n\nconst globalThis = this;\nconst defaultMergeOptions = {\n\tconcatArrays: false,\n\tignoreUndefined: false\n};\n\nconst getEnumerableOwnPropertyKeys = value => {\n\tconst keys = [];\n\n\tfor (const key in value) {\n\t\tif (hasOwnProperty.call(value, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\n\t/* istanbul ignore else  */\n\tif (Object.getOwnPropertySymbols) {\n\t\tconst symbols = Object.getOwnPropertySymbols(value);\n\n\t\tfor (const symbol of symbols) {\n\t\t\tif (propertyIsEnumerable.call(value, symbol)) {\n\t\t\t\tkeys.push(symbol);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn keys;\n};\n\nfunction clone(value) {\n\tif (Array.isArray(value)) {\n\t\treturn cloneArray(value);\n\t}\n\n\tif (isOptionObject(value)) {\n\t\treturn cloneOptionObject(value);\n\t}\n\n\treturn value;\n}\n\nfunction cloneArray(array) {\n\tconst result = array.slice(0, 0);\n\n\tgetEnumerableOwnPropertyKeys(array).forEach(key => {\n\t\tdefineProperty(result, key, clone(array[key]));\n\t});\n\n\treturn result;\n}\n\nfunction cloneOptionObject(object) {\n\tconst result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};\n\n\tgetEnumerableOwnPropertyKeys(object).forEach(key => {\n\t\tdefineProperty(result, key, clone(object[key]));\n\t});\n\n\treturn result;\n}\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {string[]} keys keys to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nconst mergeKeys = (merged, source, keys, config) => {\n\tkeys.forEach(key => {\n\t\tif (typeof source[key] === 'undefined' && config.ignoreUndefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not recurse into prototype chain of merged\n\t\tif (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n\t\t\tdefineProperty(merged, key, merge(merged[key], source[key], config));\n\t\t} else {\n\t\t\tdefineProperty(merged, key, clone(source[key]));\n\t\t}\n\t});\n\n\treturn merged;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */\nconst concatArrays = (merged, source, config) => {\n\tlet result = merged.slice(0, 0);\n\tlet resultIndex = 0;\n\n\t[merged, source].forEach(array => {\n\t\tconst indices = [];\n\n\t\t// `result.concat(array)` with cloning\n\t\tfor (let k = 0; k < array.length; k++) {\n\t\t\tif (!hasOwnProperty.call(array, k)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices.push(String(k));\n\n\t\t\tif (array === merged) {\n\t\t\t\t// Already cloned\n\t\t\t\tdefineProperty(result, resultIndex++, array[k]);\n\t\t\t} else {\n\t\t\t\tdefineProperty(result, resultIndex++, clone(array[k]));\n\t\t\t}\n\t\t}\n\n\t\t// Merge non-index keys\n\t\tresult = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);\n\t});\n\n\treturn result;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nfunction merge(merged, source, config) {\n\tif (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n\t\treturn concatArrays(merged, source, config);\n\t}\n\n\tif (!isOptionObject(source) || !isOptionObject(merged)) {\n\t\treturn clone(source);\n\t}\n\n\treturn mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);\n}\n\nmodule.exports = function (...options) {\n\tconst config = merge(clone(defaultMergeOptions), (this !== globalThis && this) || {}, defaultMergeOptions);\n\tlet merged = {_: {}};\n\n\tfor (const option of options) {\n\t\tif (option === undefined) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!isOptionObject(option)) {\n\t\t\tthrow new TypeError('`' + option + '` is not an Option Object');\n\t\t}\n\n\t\tmerged = merge(merged, {_: option}, config);\n\t}\n\n\treturn merged._;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,cAAc,CAAC;AAE9C,MAAM;EAACC;AAAc,CAAC,GAAGC,MAAM,CAACC,SAAS;AACzC,MAAM;EAACC;AAAoB,CAAC,GAAGF,MAAM;AACrC,MAAMG,cAAc,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,KAAKN,MAAM,CAACG,cAAc,CAACC,MAAM,EAAEC,IAAI,EAAE;EACnFC,KAAK;EACLC,QAAQ,EAAE,IAAI;EACdC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE;AACf,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAG,IAAI;AACvB,MAAMC,mBAAmB,GAAG;EAC3BC,YAAY,EAAE,KAAK;EACnBC,eAAe,EAAE;AAClB,CAAC;AAED,MAAMC,4BAA4B,GAAGR,KAAK,IAAI;EAC7C,MAAMS,IAAI,GAAG,EAAE;EAEf,KAAK,MAAMC,GAAG,IAAIV,KAAK,EAAE;IACxB,IAAIP,cAAc,CAACkB,IAAI,CAACX,KAAK,EAAEU,GAAG,CAAC,EAAE;MACpCD,IAAI,CAACG,IAAI,CAACF,GAAG,CAAC;IACf;EACD;;EAEA;EACA,IAAIhB,MAAM,CAACmB,qBAAqB,EAAE;IACjC,MAAMC,OAAO,GAAGpB,MAAM,CAACmB,qBAAqB,CAACb,KAAK,CAAC;IAEnD,KAAK,MAAMe,MAAM,IAAID,OAAO,EAAE;MAC7B,IAAIlB,oBAAoB,CAACe,IAAI,CAACX,KAAK,EAAEe,MAAM,CAAC,EAAE;QAC7CN,IAAI,CAACG,IAAI,CAACG,MAAM,CAAC;MAClB;IACD;EACD;EAEA,OAAON,IAAI;AACZ,CAAC;AAED,SAASO,KAAKA,CAAChB,KAAK,EAAE;EACrB,IAAIiB,KAAK,CAACC,OAAO,CAAClB,KAAK,CAAC,EAAE;IACzB,OAAOmB,UAAU,CAACnB,KAAK,CAAC;EACzB;EAEA,IAAIT,cAAc,CAACS,KAAK,CAAC,EAAE;IAC1B,OAAOoB,iBAAiB,CAACpB,KAAK,CAAC;EAChC;EAEA,OAAOA,KAAK;AACb;AAEA,SAASmB,UAAUA,CAACE,KAAK,EAAE;EAC1B,MAAMC,MAAM,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAEhCf,4BAA4B,CAACa,KAAK,CAAC,CAACG,OAAO,CAACd,GAAG,IAAI;IAClDb,cAAc,CAACyB,MAAM,EAAEZ,GAAG,EAAEM,KAAK,CAACK,KAAK,CAACX,GAAG,CAAC,CAAC,CAAC;EAC/C,CAAC,CAAC;EAEF,OAAOY,MAAM;AACd;AAEA,SAASF,iBAAiBA,CAACtB,MAAM,EAAE;EAClC,MAAMwB,MAAM,GAAG5B,MAAM,CAAC+B,cAAc,CAAC3B,MAAM,CAAC,KAAK,IAAI,GAAGJ,MAAM,CAACgC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EAEhFlB,4BAA4B,CAACV,MAAM,CAAC,CAAC0B,OAAO,CAACd,GAAG,IAAI;IACnDb,cAAc,CAACyB,MAAM,EAAEZ,GAAG,EAAEM,KAAK,CAAClB,MAAM,CAACY,GAAG,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;EAEF,OAAOY,MAAM;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,SAAS,GAAGA,CAACC,MAAM,EAAEC,MAAM,EAAEpB,IAAI,EAAEqB,MAAM,KAAK;EACnDrB,IAAI,CAACe,OAAO,CAACd,GAAG,IAAI;IACnB,IAAI,OAAOmB,MAAM,CAACnB,GAAG,CAAC,KAAK,WAAW,IAAIoB,MAAM,CAACvB,eAAe,EAAE;MACjE;IACD;;IAEA;IACA,IAAIG,GAAG,IAAIkB,MAAM,IAAIA,MAAM,CAAClB,GAAG,CAAC,KAAKhB,MAAM,CAAC+B,cAAc,CAACG,MAAM,CAAC,EAAE;MACnE/B,cAAc,CAAC+B,MAAM,EAAElB,GAAG,EAAEqB,KAAK,CAACH,MAAM,CAAClB,GAAG,CAAC,EAAEmB,MAAM,CAACnB,GAAG,CAAC,EAAEoB,MAAM,CAAC,CAAC;IACrE,CAAC,MAAM;MACNjC,cAAc,CAAC+B,MAAM,EAAElB,GAAG,EAAEM,KAAK,CAACa,MAAM,CAACnB,GAAG,CAAC,CAAC,CAAC;IAChD;EACD,CAAC,CAAC;EAEF,OAAOkB,MAAM;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMtB,YAAY,GAAGA,CAACsB,MAAM,EAAEC,MAAM,EAAEC,MAAM,KAAK;EAChD,IAAIR,MAAM,GAAGM,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/B,IAAIS,WAAW,GAAG,CAAC;EAEnB,CAACJ,MAAM,EAAEC,MAAM,CAAC,CAACL,OAAO,CAACH,KAAK,IAAI;IACjC,MAAMY,OAAO,GAAG,EAAE;;IAElB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAI,CAACzC,cAAc,CAACkB,IAAI,CAACU,KAAK,EAAEa,CAAC,CAAC,EAAE;QACnC;MACD;MAEAD,OAAO,CAACrB,IAAI,CAACwB,MAAM,CAACF,CAAC,CAAC,CAAC;MAEvB,IAAIb,KAAK,KAAKO,MAAM,EAAE;QACrB;QACA/B,cAAc,CAACyB,MAAM,EAAEU,WAAW,EAAE,EAAEX,KAAK,CAACa,CAAC,CAAC,CAAC;MAChD,CAAC,MAAM;QACNrC,cAAc,CAACyB,MAAM,EAAEU,WAAW,EAAE,EAAEhB,KAAK,CAACK,KAAK,CAACa,CAAC,CAAC,CAAC,CAAC;MACvD;IACD;;IAEA;IACAZ,MAAM,GAAGK,SAAS,CAACL,MAAM,EAAED,KAAK,EAAEb,4BAA4B,CAACa,KAAK,CAAC,CAACgB,MAAM,CAAC3B,GAAG,IAAI,CAACuB,OAAO,CAACK,QAAQ,CAAC5B,GAAG,CAAC,CAAC,EAAEoB,MAAM,CAAC;EACrH,CAAC,CAAC;EAEF,OAAOR,MAAM;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,KAAKA,CAACH,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;EACtC,IAAIA,MAAM,CAACxB,YAAY,IAAIW,KAAK,CAACC,OAAO,CAACU,MAAM,CAAC,IAAIX,KAAK,CAACC,OAAO,CAACW,MAAM,CAAC,EAAE;IAC1E,OAAOvB,YAAY,CAACsB,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC;EAC5C;EAEA,IAAI,CAACvC,cAAc,CAACsC,MAAM,CAAC,IAAI,CAACtC,cAAc,CAACqC,MAAM,CAAC,EAAE;IACvD,OAAOZ,KAAK,CAACa,MAAM,CAAC;EACrB;EAEA,OAAOF,SAAS,CAACC,MAAM,EAAEC,MAAM,EAAErB,4BAA4B,CAACqB,MAAM,CAAC,EAAEC,MAAM,CAAC;AAC/E;AAEAS,MAAM,CAACC,OAAO,GAAG,YAAsB;EACtC,MAAMV,MAAM,GAAGC,KAAK,CAACf,KAAK,CAACX,mBAAmB,CAAC,EAAG,IAAI,KAAKD,UAAU,IAAI,IAAI,IAAK,CAAC,CAAC,EAAEC,mBAAmB,CAAC;EAC1G,IAAIuB,MAAM,GAAG;IAACa,CAAC,EAAE,CAAC;EAAC,CAAC;EAAC,SAAAC,IAAA,GAAAC,SAAA,CAAAR,MAAA,EAFQS,OAAO,OAAA3B,KAAA,CAAAyB,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAAPD,OAAO,CAAAC,IAAA,IAAAF,SAAA,CAAAE,IAAA;EAAA;EAIpC,KAAK,MAAMC,MAAM,IAAIF,OAAO,EAAE;IAC7B,IAAIE,MAAM,KAAKC,SAAS,EAAE;MACzB;IACD;IAEA,IAAI,CAACxD,cAAc,CAACuD,MAAM,CAAC,EAAE;MAC5B,MAAM,IAAIE,SAAS,CAAC,GAAG,GAAGF,MAAM,GAAG,2BAA2B,CAAC;IAChE;IAEAlB,MAAM,GAAGG,KAAK,CAACH,MAAM,EAAE;MAACa,CAAC,EAAEK;IAAM,CAAC,EAAEhB,MAAM,CAAC;EAC5C;EAEA,OAAOF,MAAM,CAACa,CAAC;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}